export = CyclicCollection;
declare class CyclicCollection {
    constructor(collection: any, props?: {});
    collection: any;
    item(key: any): CyclicItem;
    get(key: any): Promise<CyclicItem | {
        type: any;
        key: any;
        parent: any;
        props: any;
        $index: any;
        indexes(): Promise<any[]>;
        delete(props?: {}, opts?: {}): Promise<boolean>;
        set(props: any, opts?: {}): Promise<any>;
        get(): Promise<any | any[]>;
        list(): Promise<any[]>;
    }>;
    set(key: any, props: any, opts: any): Promise<CyclicItem>;
    delete(key: any, props: any, opts: any): Promise<boolean>;
    filter(q?: {}, segments?: number, next?: any): Promise<{
        results: any[];
    }>;
    parallel_scan(filter: any, segment: any, total_segments: any, limit?: number, next?: any): Promise<{
        results: (CyclicItem | {
            type: any;
            key: any;
            parent: any;
            props: any;
            $index: any;
            indexes(): Promise<any[]>;
            delete(props?: {}, opts?: {}): Promise<boolean>;
            set(props: any, opts?: {}): Promise<any>;
            get(): Promise<any | any[]>;
            list(): Promise<any[]>;
        })[];
        length: number;
    }>;
    list(limit?: number, next?: any): Promise<{
        results: (CyclicItem | {
            type: any;
            key: any;
            parent: any;
            props: any;
            $index: any;
            indexes(): Promise<any[]>;
            delete(props?: {}, opts?: {}): Promise<boolean>;
            set(props: any, opts?: {}): Promise<any>;
            get(): Promise<any | any[]>;
            list(): Promise<any[]>;
        })[];
    }>;
    latest(): Promise<CyclicItem | {
        type: any;
        key: any;
        parent: any;
        props: any;
        $index: any;
        indexes(): Promise<any[]>;
        delete(props?: {}, opts?: {}): Promise<boolean>;
        set(props: any, opts?: {}): Promise<any>;
        get(): Promise<any | any[]>;
        list(): Promise<any[]>;
    }>;
    index(name: any): CyclicIndex;
    find(name: any, value: any): Promise<{
        results: (CyclicItem | {
            type: any;
            key: any;
            parent: any;
            props: any;
            $index: any;
            indexes(): Promise<any[]>;
            delete(props?: {}, opts?: {}): Promise<boolean>;
            set(props: any, opts?: {}): Promise<any>;
            get(): Promise<any | any[]>;
            list(): Promise<any[]>;
        })[];
    }>;
}
import CyclicItem = require("./cy_db_item");
import CyclicIndex = require("./cy_db_index");
//# sourceMappingURL=cy_db_collection.d.ts.map